#include <mpi.h>
 #include <stdio.h>
 #include <stdlib.h>
 #define ARRAY_SIZE 1000
 int main(int argc, char* argv[]) {
    int rank, size, i;
    int array[ARRAY_SIZE];
    int local_min, global_min;
  
    MPI_Init(&argc, &argv);
   
    MPI_Comm_size(MPI_COMM_WORLD, &size);
    
    MPI_Comm_rank(MPI_COMM_WORLD, &rank);
    
    srand(rank + time(NULL));
   
    for(i = 0; i < ARRAY_SIZE; i++) {
        array[i] = rand() % 100;
        if(i == 0 || array[i] < local_min) {
            local_min = array[i];
        }
    }
    
    printf("Local min for process %d is %d\n", rank, local_min);
  
    MPI_Reduce(&local_min, &global_min, 1, MPI_INT, MPI_MIN, 0, MPI_COMM_WORLD);
    
    if (rank == 0) {
        printf("Global min = %d\n", global_min);
    }
   
    MPI_Finalize();
    return 0;
 }
 #include<math.h>
 #include<stdio.h>
 #include<stdlib.h>
 int main()
 {
    int i,n,req[50],mov=0,cp;
    printf("enter the current position\n");
    scanf("%d",&cp);
    printf("enter the number of requests\n");
    scanf("%d",&n);
    printf("enter the request order\n");
    for(i=0;i<n;i++)
    {
        scanf("%d",&req[i]);
    }
    mov=mov+abs(cp-req[0]);
    printf("%d -> %d",cp,req[0]);
    for(i=1;i<n;i++)
    {
        mov=mov+abs(req[i]-req[i-1]);
        printf(" -> %d",req[i]);
    }
    printf("\n");
    printf("total head movement = %d\n",mov);
 }
