 #include <mpi.h>
 #include <stdio.h>
 #include <stdlib.h>
#define ARRAY_SIZE 1000
 int main(int argc, char* argv[]) {
    int rank, size, i;
    int array[ARRAY_SIZE];
    int local_sum = 0, total_sum;
   
    MPI_Init(&argc, &argv);
   
    MPI_Comm_size(MPI_COMM_WORLD, &size);
  
    MPI_Comm_rank(MPI_COMM_WORLD, &rank);
    
    srand(rank + time(NULL));
   
    for(i = 0; i < ARRAY_SIZE; i++) {
        array[i] = rand() % 100;
        if(array[i] % 2 != 0) {
            local_sum += array[i];
        }
    }
  
    printf("Local sum for process %d is %d\n", rank, local_sum);
   
    MPI_Reduce(&local_sum, &total_sum, 1, MPI_INT, MPI_SUM, 0, MPI_COMM_WORLD);
    
    if (rank == 0) {
        printf("Total sum = %d\n", total_sum);
    }
   
    MPI_Finalize();
    return 0;
 }
 
 #include<stdio.h>
 #include<stdlib.h>
#include<string.h>
 #include<time.h>
 struct dirfile
 {
 char fname[20];
 int startblk,length;
 }direntry[20];
 int bv[64];
 int used=0;
 int totalfile=0;
 int n;
 void initialize()
 {
 int i;
 srand(time(NULL));
 for(i=0;i<n;i++)
 {
  if(rand()%2==0)
  {
   bv[i]=0;
   used++;
  }
  else
  {
   bv[i]=1;
  }
 }
 }
 void showbv()
 {
 int i;
 printf("block number \t status\n");
 for(i=0;i<n;i++)
 {
  printf("%d\t\t",i);
  if(bv[i]==0)
  {
   printf("allocated\n");
  }
  else
  {
   printf("free\n");
  }
 }
 }
 int search(int length)
 {
 int i,j,flag=1,blknum;
 for(i=0;i<n;i++)
 {
  if(bv[i]==1)
  {
   flag=1;
   for(blknum=i,j=0;j<length;j++)
   {
    if(bv[blknum]==1)
    {
     blknum++;
     continue;
    }
     else
    {
     flag=0;
     break;
    }
   }
   if(flag==1)
    return i;
  }
 }
 return -1;
 }
 void createfile()
 {
 char fname[10];
 int length,blknum,k;
 printf("\n enter file name:");
 scanf("%s",&fname);
 printf("\n enter the length of file:");
 scanf("%d",&length);
 if(length<=n-used)
 {
  blknum=search(length);
 }
 else
 {
  blknum=-1;
 }
 if(blknum==-1)
  {
  printf("error:no disk space available\n");
 }
 else
 {
  printf("\nblock allocated\n");
  used=used+length;
  for(k=blknum;k<(blknum+length);k++)
  {
   bv[k]=0;
  }
  k=totalfile++;
  strcpy(direntry[k].fname,fname);
  direntry[k].startblk=blknum;
  direntry[k].length=length;
 }
 }
 void displaydir()
 {
 int k;
 printf("\tfilename\tstart\tsize\n");
 for(k=0;k<totalfile;k++)
 {
  
printf("%s\t%d\t%d\n",direntry[k].fname,direntry[k].startblk,direntry[k].length);
 }
 printf("\nused block=%d",used);
 printf("\nfree block=%d",n-used);
 }
 int main()
 {
 int choice;
 printf("enter the number of blocks in the disk:");
 scanf("%d",&n);
 initialize();
 do{
  printf("\nmenu\n");
  printf("1.bit vector\n");
  printf("2.create new file\n");
  printf("3.show directory\n");
  printf("4.exit\n");
  printf("enter your choice: ");
  scanf("%d",&choice);
  switch(choice)
  {
   case 1:showbv(n);
    break;
   case 2:createfile(n); 
    break;
   case 3:displaydir(); 
    break;
   case 4:printf("exiting...\n"); 
    break;
   default:printf("error:invalid choice\n");
   break;
  }
 }
 while(choice!=4);
 return 0;
 }
